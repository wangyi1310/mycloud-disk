name: Create Release

on:
  push:
    tags:
      - '*'  # 当有任何新的 tag 被推送时触发此工作流
      
permissions:
  contents: read
  pull-requests: write

jobs:
  build_image:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      name: Check out code
      
    - name: set environment variables
      id: env_vars
      run: |
        TAG_NAME=${{ github.ref_name }}
        CURRENT_TIME=$(TZ="Asia/Shanghai" date +"%Y%m%d%H%M%S")
        TAG="${TAG_NAME}-${CURRENT_TIME}"
        echo "::set-output name=tag::$TAG"
    
    - name: build && push image
      uses: mr-smithers-excellent/docker-build-push@v6
      with:
        image: mycloud-disk
        tags:  ${{ steps.env_vars.outputs.tag }}
        registry: ccr.ccs.tencentyun.com/ottoypwang12111
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v3
        name: Check out code

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
           # 根据不同系统生成不同扩展名的二进制文件
           if [ "${{ matrix.goos }}" == "windows" ]; then
            go build -o mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}.exe 
           else
            go build -o mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}
           fi
      
      - name: Upload binary for Windows
        if: ${{ matrix.goos == 'windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}.exe

      - name: Upload binary for non-Windows
        if: ${{ matrix.goos != 'windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}
          path: mycloud-disk-${{ matrix.goos }}-${{ matrix.goarch }}


  create-release:
    runs-on: ubuntu-latest
    needs: [build-binaries]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出代码到工作区
        
      - name: Generate Changelog
        id: generate-changelog
        run: |
          # 获取上一个标签（如果存在）
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 @^ 2>/dev/null || echo "")
          # 生成变更日志：仅显示 feat/fix 等关键提交
          if [ -z "$PREVIOUS_TAG" ]; then
            COMMITS="首次发布，无历史变更记录。"
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..@ --no-merges)
          fi
          # 严格按 GitHub Actions 格式输出
          echo "changelog=$COMMITS" >> $GITHUB_OUTPUT
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}  # 推荐使用默认的 GITHUB_TOKEN
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          body: |
            # 版本说明：${{ github.ref_name }}
            ## 变更日志
            ${{ steps.generate-changelog.outputs.changelog }}
              
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            mycloud-disk-*